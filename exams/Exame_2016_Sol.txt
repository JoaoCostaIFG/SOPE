1
a)
Protecao do SO - Memory Management Unit para nao deixar os processos acederem a zona de memorias que nao devem
Escalonamento do Processador - Timer para controlar o tempo de um processo no processador
Semaforos - Instrucoes Test and Set ou Swap para bloquear a execucao de outros processos que partilhem o semaforo
b)
b1)O tempo de processador que o processo gasta enquanto esta em execucao
b2)CPU-Bound, porque sao mais custosos para o processador, diminui a prioridade da sua execucao (esperam mais tempo para executar)
c)
// fora da thread - talvez n fosse preciso incluir
sem mutex, counter;
init(mutex, 1)
init(counter, N);
//dentro da thread
wait(counter);
wait(mutex);
//escolher lugar
signal(mutex);
//quando for para sair
signal(counter);
d)
d1)O endereço da variavel que nos e mostrado e o endereco logico, o endereco fisico e diferente para os dois processos.
d2)Nao, nunca se sabe a qual dos processos o processador vai dar tempo primeiro.
e)
e1) é preferível que ocorra um deadlock,de vez em quando, do que estar sujeito ao overhead necessário para os evitar/detectar.
e2)Assegurar que pelo menos 1 das 4 condições necessárias não se verifica (exclusao mutua, retem e espera, nao preempcao dos recursos, espera circular)
f)
f1) Sim, o processo P2, porque tem uma grande utilizacao do disco de paginacao e baixa utilizacao do cpu, o que significa que passou a maioria do seu tempo em actividades de paginacao.
f2) Nao, isso so seria prejudicial porque o processador ja tem uma utilizacao muito baixa e outro processo so aumentaria a necessidade de alterar as paginas que estao em memoria, fazendo aumentar ainda mais o thrashing
g)
g1)/home/user1/SOPE
g2)
a- directorio
b- ficheiro regular
c- FIFO
owner: read e write, group: read e write, others: read.
ou 0664
g3)chmod 0764 b
g4) as entradas {c, e}, porque o i-node e o mesmo (157053)
2
a)
int setupFifos(){
int i;
char path[32];
for(i = 1; i < NUM_WORKERS; i++){
sprintf(path, "/tmp/myfifo%d", i);
mkfifo(path, 0666);
}
return 0;
}
b)
int setupLB(){
return pthread_create(&loadBalancer, NULL, lbEntry, NULL);
}
c)
int setupWorkers(){
int i;
for(i = 1; i < NUM_WORKERS; i++){
int* x = (int *) malloc(sizeof(int));
*x = i;
pthread_create(&workers[i-1], NULL, workerEntry, (void *) x);
}
return 0;
}
d)
void* workerEntry(void* p){
int worker_id = *((int *) p);
char path[32];
char message[512];
sprintf(path, "/tmp/myfifo%d", p);
int fd = open(path, O_RDONLY);
int i = 0;
sprintf(path, "worker%d.log", p);
while(read(fd, &message[i], sizeof(char))){
if(message[i] == '\0'){
int log_fd = open(path, O_WRONLY|O_APPEND);
write(log_fd, message, strlen(message) + 1);
i = 0;
}
else
i++;
}
return 0;
}
e)
int teardownWorkers(){
int i;
for(i = 0; i < NUM_WORKERS; i++)
pthread_join(workers[i]);
return 0;
}
int teardownLB(){
return pthread_join(loadBalancer);
}
3
a)
info_t* info = malloc(sizeof(info_t));
*info = get_info();
pthread_t tid;
pthread_create(&tid, NULL, t2, info);
b)
pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condition_var = PTHREAD_COND_INITIALIZER;
c)Antes do main (depois dos includes), pois estas variaveis, como sao partilhadas pelas duas threads, devem ser globais.
d)t1
pthread_mutex_lock(&mutex);
A
pthread_cond_signal(&condition_var);
pthread_mutex_unlock(&mutex);
t2
pthread_mutex_lock(&mutex);
while(!C)
pthread_cond_wait(&condition_var, &mutex);
B
pthread_mutex_unlock(&mutex);
e) //E so alterar de pthread_cond_signal para pthread_cond_broadcast
pthread_mutex_lock(&mutex);
A
pthread_cond_broadcast(&condition_var);
pthread_mutex_unlock(&mutex);
f) Seria necessario o mutex e a variavel de condicao serem partilhados entre os dois processos (criados em memoria partilhada) e serem inicializados dinamicamente (funcao pthread_mutex_init e pthread_cond_init ) com um atributo que inclua a propriedade PTHREAD_PROCESS_SHARED. De resto a sua utilizacao mantem-se igual.